# Author: ltan
# Date: 2020-06-01
# 儿童节快乐呦

1. 表创建基础
CREATE TABLE table_name(cust_id int NOT NULL AUTO_INCREMENT, cust_city char(50) NULL, ...)ENGINE=InnoDB;

处理现有的表 
在创建新表时，指定的表名必须不存在，否则将出错。如果要防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建它，而不是简单地用创建表语句覆盖它。
如果你仅想在一个表不存在时创建它，应该在表名后给出IF NOT EXISTS。这样做不检查已有表的模式是否与你打算创建的表模式相匹配。它只是查看表名是否存在，并且仅在表名不存在时创建它。

2. 使用NULL值
NULL值就是没有值或缺值。允许NULL值的列也允许在插入行时不给出该列的值。不允许NULL值的列不接受该列没有值的行，换句话说，在插入或更新行时，该列必须有值。

每个表列要么是NULL列，要么是NOT NULL列，这种状态在创建时由表的定义规定。

理解NULL 不要把NULL值与空串相混淆。NULL值是没有值，它不是空串。如果指定''（两个单引号，其间没有字符），这在NOT NULL列中是允许的。空串是一个有效的值，它不是无值。NULL值用关键字NULL而不是空串指定


3. 主键
主键值必须唯一。即，表中的每个行必须具有唯一的主键值。如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一。

主键和NULL值：主键为其值唯一标识表中每个行的列。主键中只能使用不允许NULL值的列。允许NULL值的列不能作为唯一标识。

4. 使用AUTO_INCREMENT
AUTO_INCREMENT告诉MySQL，本列每当增加一行时自动增量。每次执行一个INSERT操作时，MySQL自动对该列增量，给该列赋予下一个可用的值。这样给每个行分配一个唯一的cust_id，从而可以用作主键值。

5. 指定默认值
如果在插入行时没有给出值，MySQL允许指定此时使用的默认值。默认值用CREATE TABLE语句的列定义中的DEFAULT关键字指定。

CREATE TABLE table_name
( cust_id int NOT NULL,
  quantity int  NOT NULL DEFAULT 1, 
  ...
)ENGINE=InnoDB;

不允许函数 与大多数DBMS不一样，MySQL不允许使用函数作为默认值，它只支持常量。

使用默认值而不是NULL值 许多数据库开发人员使用默认值而不是NULL列，特别是对用于计算或数据分组的列更是如此。

6. 引擎
InnoDB：是一个可靠的事务处理引擎，它不支持全文本搜索；
MEMORY：在功能等同于MyISAM，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）； 
MyISAM：是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。

外键不能跨引擎 混用引擎类型有一个大缺陷。外键不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。

7. 更新表
为更新表定义，可使用ALTER TABLE语句。但是，理想状态下，当表中存储数据以后，该表就不应该再被更新。

为了使用ALTER TABLE更改表结构，必须给出下面的信息：
在ALTER TABLE之后给出要更改的表名（该表必须存在，否则将出错）； 
所做更改的列表


复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：
 用新的列布局创建一个新表；
 使用INSERT SELECT语句从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；
 检验包含所需数据的新表；
 重命名旧表（如果确定，可以删除它）； 
 用旧表原来的名字重命名新表；
 根据需要，重新创建触发器、存储过程、索引和外键。

8. 删除表
删除表（删除整个表而不是其内容）非常简单，使用DROP TABLE语句即可：
DROP table customers;

9. 重命名旧表
RENAME TABLE语句可以重命名一个表：RENAME TABLE customers2 to customers;